@using System
@using System.Reflection
@using SvgBlazor.Docs.Models
@using SvgBlazor.Docs.Extensions
@using SvgBlazor.Docs.Extractors

<h2>@ElementType.Name API</h2>
<h3>Properties</h3>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var property in GetElementApiProperties())
        {
            <tr>
                <td>@property.Name</td>
                <td>@property.Type</td>
                <td>@property.Description</td>
            </tr>
        }
    </tbody>
</table>

<h3>Methods</h3>
<table class="table">
    <colgroup>
        <col style="width: 20%;">
        <col style="width: 20%;">
        <col style="width: 15%;">
        <col style="width: 45%;">
    </colgroup>
    <thead>
        <tr>
            <th>Name</th>
            <th>Parameters</th>
            <th>Return value</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var method in GetElementApiMethods())
        {
            <tr>
                <td>@method.Name</td>
                <td>
                    @foreach (var p in method.Parameters)
                    {
                        <p>@p</p>
                    }
                </td>
                <td>@method.ReturnValue</td>
                <td>@method.Description</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Type ElementType { get; set; }

    private ElementApiExtractor _extractor = new (ReflectionTypesExtensions.GetXmlDoc());

    private IEnumerable<ElementApiMethod> GetElementApiMethods() =>
        _extractor.ExtractApiMethods(ElementType);

    private IEnumerable<ElementApiProperty> GetElementApiProperties() =>
        _extractor.ExtractApiProperties(ElementType);

    private IEnumerable<string> ParametersToString(ParameterInfo[] parameters) =>
        parameters.Select(x => (x.ParameterType.FullName + " " + x.Name)).ToArray();
}
